-- CSC 322 Project 3
--
-- Name: Wenzhe Shi
-- Vnum: V00968344
-- Name: Vyom Shah
-- Vnum: V00951024
-- Name: Halle Koyanagi
-- Vnum: V00913278
--
MODULE main
  
VAR
  chopsticks : array 0..4 of {nobody,0,1,2,3,4}; -- who holds the chopstick.
  -- the 2 tokens to eat
  token1 : {0,1,2,3,4};
  token2 : {0,1,2,3,4};
  --
  -- Philosopher i has chopstick i on left and chopstick
  -- (i + 1) mod 5 on right
  --
  p0 : process philosopher(0,chopsticks[0],chopsticks[1], token1, token2);
  p1 : process philosopher(1,chopsticks[1],chopsticks[2], token1, token2);
  p2 : process philosopher(2,chopsticks[2],chopsticks[3], token1, token2);
  p3 : process philosopher(3,chopsticks[3],chopsticks[4], token1, token2);
  p4 : process philosopher(4,chopsticks[4],chopsticks[0], token1, token2);
  
ASSIGN
  --
  -- Initially, all chopsticks are free
  --
  init(chopsticks[0]) := nobody;
  init(chopsticks[1]) := nobody;
  init(chopsticks[2]) := nobody;
  init(chopsticks[3]) := nobody;
  init(chopsticks[4]) := nobody;
  -- initially token1 is granted to p0 and token2 is granted to p2
  init(token1) := 0;
  init(token2) := 2;

-- STRICT SEQUENCING
-- philosopher 0 can eat before philosopher 1, 2, 3, 4
SPEC EF (p0.state = eating & E [ p0.state = eating U (!(p0.state = eating) & E [ !(p1.state = eating) U p0.state = eating ])]) 
SPEC EF (p0.state = eating & E [ p0.state = eating U (!(p0.state = eating) & E [ !(p2.state = eating) U p0.state = eating ])]) 
SPEC EF (p0.state = eating & E [ p0.state = eating U (!(p0.state = eating) & E [ !(p3.state = eating) U p0.state = eating ])]) 
SPEC EF (p0.state = eating & E [ p0.state = eating U (!(p0.state = eating) & E [ !(p4.state = eating) U p0.state = eating ])])

-- philosopher 1 can eat before philosopher 0, 2, 3, 4
SPEC EF (p1.state = eating & E [ p1.state = eating U (!(p1.state = eating) & E [ !(p2.state = eating) U p1.state = eating ])])
SPEC EF (p1.state = eating & E [ p1.state = eating U (!(p1.state = eating) & E [ !(p3.state = eating) U p1.state = eating ])])
SPEC EF (p1.state = eating & E [ p1.state = eating U (!(p1.state = eating) & E [ !(p4.state = eating) U p1.state = eating ])]) 
SPEC EF (p1.state = eating & E [ p1.state = eating U (!(p1.state = eating) & E [ !(p0.state = eating) U p1.state = eating ])])

-- philosopher 2 can eat before philosopher 0, 1, 3, 4
SPEC EF (p2.state = eating & E [ p2.state = eating U (!(p2.state = eating) & E [ !(p3.state = eating) U p2.state = eating ])])
SPEC EF (p2.state = eating & E [ p2.state = eating U (!(p2.state = eating) & E [ !(p4.state = eating) U p2.state = eating ])])
SPEC EF (p2.state = eating & E [ p2.state = eating U (!(p2.state = eating) & E [ !(p0.state = eating) U p2.state = eating ])])
SPEC EF (p2.state = eating & E [ p2.state = eating U (!(p2.state = eating) & E [ !(p1.state = eating) U p2.state = eating ])])

-- philosopher 3 can eat before philosopher 0, 1, 2, 4
SPEC EF (p3.state = eating & E [ p3.state = eating U (!(p3.state = eating) & E [ !(p4.state = eating) U p3.state = eating ])])
SPEC EF (p3.state = eating & E [ p3.state = eating U (!(p3.state = eating) & E [ !(p0.state = eating) U p3.state = eating ])])
SPEC EF (p3.state = eating & E [ p3.state = eating U (!(p3.state = eating) & E [ !(p1.state = eating) U p3.state = eating ])])
SPEC EF (p3.state = eating & E [ p3.state = eating U (!(p3.state = eating) & E [ !(p2.state = eating) U p3.state = eating ])])

-- philosopher 4 can eat before philosopher 0, 1, 2, 3
SPEC EF (p4.state = eating & E [ p4.state = eating U (!(p4.state = eating) & E [ !(p0.state = eating) U p4.state = eating ])])
SPEC EF (p4.state = eating & E [ p4.state = eating U (!(p4.state = eating) & E [ !(p1.state = eating) U p4.state = eating ])])
SPEC EF (p4.state = eating & E [ p4.state = eating U (!(p4.state = eating) & E [ !(p2.state = eating) U p4.state = eating ])])
SPEC EF (p4.state = eating & E [ p4.state = eating U (!(p4.state = eating) & E [ !(p3.state = eating) U p4.state = eating ])])

-- CONCURRENT EATING
SPEC EF ((p0.state=eating)&(p2.state=eating))
SPEC EF ((p0.state=eating)&(p3.state=eating))
SPEC EF ((p1.state=eating)&(p3.state=eating))
SPEC EF ((p1.state=eating)&(p4.state=eating))
SPEC EF ((p2.state=eating)&(p4.state=eating))

MODULE philosopher(i,left,right,token1,token2)
  
VAR
  state : {thinking, hungry, eating, done};
  
DEFINE
  --
  -- These are just abbreviations, not state variables
  --
  gotleft := (left=i);
  gotright := (right=i);
  leftfree := (left=nobody);
  rightfree := (right=nobody);
  hastoken1 := (token1 = i);
  hastoken2 := (token2 = i);
    
ASSIGN
  init(state) := thinking;

  next(left)  := case
    (state = done) : nobody; -- drop chopstick
    --
    -- if hungry and left chopstick if free, take it
    --
    (state=hungry) & leftfree & (hastoken1 | hastoken2) : i; -- take chopstick if has either token
    TRUE : left;
  esac;

  next(right) := case
    (state = done) : nobody; -- drop chopstick
    --
    -- if hungry and have left chopstick and right is free, take it
    --
    (state=hungry) & gotleft & rightfree & (hastoken1 | hastoken2) : i; -- take chopstick if has either token
    TRUE : right;
  esac;

  next(state) := case
    (state=thinking) : {thinking, hungry};
    (state=hungry) & gotleft & gotright : eating;
    (state=hungry) : hungry; -- don't have chopsticks
    (state=eating) : {eating, done};
    (state=done) : thinking;
    TRUE : state;
  esac;

  next(token1) := case
    (state=thinking) & hastoken1 & token2 != ((i + 1) mod 5 + 1): (i + 1) mod 5; -- thinking with token1 and passing wont make token next to token2
    (state=done) & hastoken1 & token2 != ((i + 1) mod 5 + 1): (i + 1) mod 5; -- pass to next (finished eating) and passing wont make token next to token2
    TRUE : token1;
  esac;

  next(token2) := case
    (state=thinking) & hastoken2 & token1 != ((i + 1) mod 5 + 1): (i + 1) mod 5; -- thinking with token2 and passing wont make token next to token1
    (state=done) & hastoken2 & token1 != ((i + 1) mod 5 + 1): (i + 1) mod 5; -- pass to next (finished eating) and passing wont make token next to token1
    TRUE : token2;
  esac;



-- add fairness constraints here

FAIRNESS running;
FAIRNESS state=hungry;

-- add specifications here 

-- safety:

SPEC AG ((state = eating) -> gotleft & gotright)

-- liveness:

SPEC AG ((state = hungry) -> AF (state = eating))
